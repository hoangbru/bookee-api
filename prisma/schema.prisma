// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Promotion {
  id             Int      @id @default(autoincrement())
  type           String   @default("0")
  name           String   @unique
  startDate      DateTime
  endDate        DateTime
  discountAmount String
  code           String?
  books          Book[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("promotions")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  rating    Decimal
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([bookId])
  @@map("reviews")
}

model Book {
  id            Int           @id @default(autoincrement())
  title         String
  author        String
  image         String?
  publishedDate String?
  description   String?
  price         Decimal
  categoryId    Int?
  category      Category?     @relation(fields: [categoryId], references: [id])
  promotionId   Int?
  promotion     Promotion?    @relation(fields: [promotionId], references: [id])
  reviews       Review[]
  orderDetails  OrderDetail[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([categoryId])
  @@index([promotionId])
  @@map("books")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String?
  username  String   @unique
  email     String   @unique
  password  String
  address   String   @default("")
  phone     String   @default("")
  image     String   @default("")
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews Review[]
  orders  Order[]

  @@map("users")
}

model Order {
  id           Int           @id @default(autoincrement())
  code         String?       @unique
  orderType    String?       @default("0")
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName     String?
  address      String?
  phone        String?
  email        String?
  status       String?       @default("0")
  amount       Decimal?
  orderDetails OrderDetail[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("orders")
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  quantity  Decimal?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([bookId])
  @@map("order_details")
}

enum Role {
  USER
  ADMIN
}
